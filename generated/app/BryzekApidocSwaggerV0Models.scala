/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.11.52
 * apidoc:0.11.51 http://www.apidoc.me/bryzek/apidoc-swagger/0.11.52/play_2_x_json
 */
package com.bryzek.apidoc.swagger.v0.models {

  case class Swagger(
    swagger: String,
    host: String,
    basePath: String
  )

}

package com.bryzek.apidoc.swagger.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import com.bryzek.apidoc.swagger.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit def jsonReadsApidocswaggerSwagger: play.api.libs.json.Reads[Swagger] = {
      (
        (__ \ "swagger").read[String] and
        (__ \ "host").read[String] and
        (__ \ "basePath").read[String]
      )(Swagger.apply _)
    }

    def jsObjectSwagger(obj: com.bryzek.apidoc.swagger.v0.models.Swagger) = {
      play.api.libs.json.Json.obj(
        "swagger" -> play.api.libs.json.JsString(obj.swagger),
        "host" -> play.api.libs.json.JsString(obj.host),
        "basePath" -> play.api.libs.json.JsString(obj.basePath)
      )
    }

    implicit def jsonWritesApidocswaggerSwagger: play.api.libs.json.Writes[Swagger] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.swagger.v0.models.Swagger] {
        def writes(obj: com.bryzek.apidoc.swagger.v0.models.Swagger) = {
          jsObjectSwagger(obj)
        }
      }
    }
  }
}

package com.bryzek.apidoc.swagger.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}
    import org.joda.time.{DateTime, LocalDate}
    import org.joda.time.format.ISODateTimeFormat
    import com.bryzek.apidoc.swagger.v0.models._

    // Type: date-time-iso8601
    implicit val pathBindableTypeDateTimeIso8601 = new PathBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    implicit val queryStringBindableTypeDateTimeIso8601 = new QueryStringBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    // Type: date-iso8601
    implicit val pathBindableTypeDateIso8601 = new PathBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    implicit val queryStringBindableTypeDateIso8601 = new QueryStringBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )



  }

}
